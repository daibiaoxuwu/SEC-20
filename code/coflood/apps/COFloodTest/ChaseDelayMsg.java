/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ChaseDelayMsg'
 * message type.
 */

public class ChaseDelayMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 25;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 44;

    /** Create a new ChaseDelayMsg of size 25. */
    public ChaseDelayMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ChaseDelayMsg of the given data_length. */
    public ChaseDelayMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ChaseDelayMsg with the given data_length
     * and base offset.
     */
    public ChaseDelayMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ChaseDelayMsg using the given byte array
     * as backing store.
     */
    public ChaseDelayMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ChaseDelayMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ChaseDelayMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ChaseDelayMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ChaseDelayMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ChaseDelayMsg embedded in the given message
     * at the given base offset.
     */
    public ChaseDelayMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ChaseDelayMsg embedded in the given message
     * at the given base offset and length.
     */
    public ChaseDelayMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ChaseDelayMsg> \n";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seq_no=0x"+Long.toHexString(get_seq_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src_id=0x"+Long.toHexString(get_src_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rec_time_h=0x"+Long.toHexString(get_rec_time_h())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rec_time_l=0x"+Long.toHexString(get_rec_time_l())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hop_delay_h=0x"+Long.toHexString(get_hop_delay_h())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hop_delay_l=0x"+Long.toHexString(get_hop_delay_l())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parent_ETD=0x"+Long.toHexString(get_parent_ETD())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [local_ETD=0x"+Long.toHexString(get_local_ETD())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [delta_ETD=0x"+Long.toHexString(get_delta_ETD())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [long_link_sender=0x"+Long.toHexString(get_long_link_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [MPD=0x"+Long.toHexString(get_MPD())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [shortcut_sender=0x"+Long.toHexString(get_shortcut_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tree_sender=0x"+Long.toHexString(get_tree_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seq_no
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seq_no' is signed (false).
     */
    public static boolean isSigned_seq_no() {
        return false;
    }

    /**
     * Return whether the field 'seq_no' is an array (false).
     */
    public static boolean isArray_seq_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seq_no'
     */
    public static int offset_seq_no() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seq_no'
     */
    public static int offsetBits_seq_no() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'seq_no'
     */
    public int get_seq_no() {
        return (int)getUIntBEElement(offsetBits_seq_no(), 16);
    }

    /**
     * Set the value of the field 'seq_no'
     */
    public void set_seq_no(int value) {
        setUIntBEElement(offsetBits_seq_no(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seq_no'
     */
    public static int size_seq_no() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seq_no'
     */
    public static int sizeBits_seq_no() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_id
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_id' is signed (false).
     */
    public static boolean isSigned_src_id() {
        return false;
    }

    /**
     * Return whether the field 'src_id' is an array (false).
     */
    public static boolean isArray_src_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src_id'
     */
    public static int offset_src_id() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_id'
     */
    public static int offsetBits_src_id() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'src_id'
     */
    public int get_src_id() {
        return (int)getUIntBEElement(offsetBits_src_id(), 16);
    }

    /**
     * Set the value of the field 'src_id'
     */
    public void set_src_id(int value) {
        setUIntBEElement(offsetBits_src_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src_id'
     */
    public static int size_src_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src_id'
     */
    public static int sizeBits_src_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rec_time_h
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rec_time_h' is signed (false).
     */
    public static boolean isSigned_rec_time_h() {
        return false;
    }

    /**
     * Return whether the field 'rec_time_h' is an array (false).
     */
    public static boolean isArray_rec_time_h() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rec_time_h'
     */
    public static int offset_rec_time_h() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rec_time_h'
     */
    public static int offsetBits_rec_time_h() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'rec_time_h'
     */
    public int get_rec_time_h() {
        return (int)getUIntBEElement(offsetBits_rec_time_h(), 16);
    }

    /**
     * Set the value of the field 'rec_time_h'
     */
    public void set_rec_time_h(int value) {
        setUIntBEElement(offsetBits_rec_time_h(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rec_time_h'
     */
    public static int size_rec_time_h() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rec_time_h'
     */
    public static int sizeBits_rec_time_h() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rec_time_l
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rec_time_l' is signed (false).
     */
    public static boolean isSigned_rec_time_l() {
        return false;
    }

    /**
     * Return whether the field 'rec_time_l' is an array (false).
     */
    public static boolean isArray_rec_time_l() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rec_time_l'
     */
    public static int offset_rec_time_l() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rec_time_l'
     */
    public static int offsetBits_rec_time_l() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'rec_time_l'
     */
    public int get_rec_time_l() {
        return (int)getUIntBEElement(offsetBits_rec_time_l(), 16);
    }

    /**
     * Set the value of the field 'rec_time_l'
     */
    public void set_rec_time_l(int value) {
        setUIntBEElement(offsetBits_rec_time_l(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rec_time_l'
     */
    public static int size_rec_time_l() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rec_time_l'
     */
    public static int sizeBits_rec_time_l() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hop_delay_h
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hop_delay_h' is signed (false).
     */
    public static boolean isSigned_hop_delay_h() {
        return false;
    }

    /**
     * Return whether the field 'hop_delay_h' is an array (false).
     */
    public static boolean isArray_hop_delay_h() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hop_delay_h'
     */
    public static int offset_hop_delay_h() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hop_delay_h'
     */
    public static int offsetBits_hop_delay_h() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'hop_delay_h'
     */
    public int get_hop_delay_h() {
        return (int)getUIntBEElement(offsetBits_hop_delay_h(), 16);
    }

    /**
     * Set the value of the field 'hop_delay_h'
     */
    public void set_hop_delay_h(int value) {
        setUIntBEElement(offsetBits_hop_delay_h(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hop_delay_h'
     */
    public static int size_hop_delay_h() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hop_delay_h'
     */
    public static int sizeBits_hop_delay_h() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hop_delay_l
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hop_delay_l' is signed (false).
     */
    public static boolean isSigned_hop_delay_l() {
        return false;
    }

    /**
     * Return whether the field 'hop_delay_l' is an array (false).
     */
    public static boolean isArray_hop_delay_l() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hop_delay_l'
     */
    public static int offset_hop_delay_l() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hop_delay_l'
     */
    public static int offsetBits_hop_delay_l() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'hop_delay_l'
     */
    public int get_hop_delay_l() {
        return (int)getUIntBEElement(offsetBits_hop_delay_l(), 16);
    }

    /**
     * Set the value of the field 'hop_delay_l'
     */
    public void set_hop_delay_l(int value) {
        setUIntBEElement(offsetBits_hop_delay_l(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hop_delay_l'
     */
    public static int size_hop_delay_l() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hop_delay_l'
     */
    public static int sizeBits_hop_delay_l() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parent_ETD
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parent_ETD' is signed (false).
     */
    public static boolean isSigned_parent_ETD() {
        return false;
    }

    /**
     * Return whether the field 'parent_ETD' is an array (false).
     */
    public static boolean isArray_parent_ETD() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parent_ETD'
     */
    public static int offset_parent_ETD() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parent_ETD'
     */
    public static int offsetBits_parent_ETD() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'parent_ETD'
     */
    public int get_parent_ETD() {
        return (int)getUIntBEElement(offsetBits_parent_ETD(), 16);
    }

    /**
     * Set the value of the field 'parent_ETD'
     */
    public void set_parent_ETD(int value) {
        setUIntBEElement(offsetBits_parent_ETD(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'parent_ETD'
     */
    public static int size_parent_ETD() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parent_ETD'
     */
    public static int sizeBits_parent_ETD() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: local_ETD
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'local_ETD' is signed (false).
     */
    public static boolean isSigned_local_ETD() {
        return false;
    }

    /**
     * Return whether the field 'local_ETD' is an array (false).
     */
    public static boolean isArray_local_ETD() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'local_ETD'
     */
    public static int offset_local_ETD() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'local_ETD'
     */
    public static int offsetBits_local_ETD() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'local_ETD'
     */
    public int get_local_ETD() {
        return (int)getUIntBEElement(offsetBits_local_ETD(), 16);
    }

    /**
     * Set the value of the field 'local_ETD'
     */
    public void set_local_ETD(int value) {
        setUIntBEElement(offsetBits_local_ETD(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'local_ETD'
     */
    public static int size_local_ETD() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'local_ETD'
     */
    public static int sizeBits_local_ETD() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delta_ETD
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delta_ETD' is signed (false).
     */
    public static boolean isSigned_delta_ETD() {
        return false;
    }

    /**
     * Return whether the field 'delta_ETD' is an array (false).
     */
    public static boolean isArray_delta_ETD() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'delta_ETD'
     */
    public static int offset_delta_ETD() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delta_ETD'
     */
    public static int offsetBits_delta_ETD() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'delta_ETD'
     */
    public int get_delta_ETD() {
        return (int)getUIntBEElement(offsetBits_delta_ETD(), 16);
    }

    /**
     * Set the value of the field 'delta_ETD'
     */
    public void set_delta_ETD(int value) {
        setUIntBEElement(offsetBits_delta_ETD(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'delta_ETD'
     */
    public static int size_delta_ETD() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'delta_ETD'
     */
    public static int sizeBits_delta_ETD() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: long_link_sender
    //   Field type: short, unsigned
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'long_link_sender' is signed (false).
     */
    public static boolean isSigned_long_link_sender() {
        return false;
    }

    /**
     * Return whether the field 'long_link_sender' is an array (false).
     */
    public static boolean isArray_long_link_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'long_link_sender'
     */
    public static int offset_long_link_sender() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'long_link_sender'
     */
    public static int offsetBits_long_link_sender() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'long_link_sender'
     */
    public short get_long_link_sender() {
        return (short)getUIntBEElement(offsetBits_long_link_sender(), 8);
    }

    /**
     * Set the value of the field 'long_link_sender'
     */
    public void set_long_link_sender(short value) {
        setUIntBEElement(offsetBits_long_link_sender(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'long_link_sender'
     */
    public static int size_long_link_sender() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'long_link_sender'
     */
    public static int sizeBits_long_link_sender() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: MPD
    //   Field type: int, unsigned
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'MPD' is signed (false).
     */
    public static boolean isSigned_MPD() {
        return false;
    }

    /**
     * Return whether the field 'MPD' is an array (false).
     */
    public static boolean isArray_MPD() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'MPD'
     */
    public static int offset_MPD() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'MPD'
     */
    public static int offsetBits_MPD() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'MPD'
     */
    public int get_MPD() {
        return (int)getUIntBEElement(offsetBits_MPD(), 16);
    }

    /**
     * Set the value of the field 'MPD'
     */
    public void set_MPD(int value) {
        setUIntBEElement(offsetBits_MPD(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'MPD'
     */
    public static int size_MPD() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'MPD'
     */
    public static int sizeBits_MPD() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: shortcut_sender
    //   Field type: short, unsigned
    //   Offset (bits): 184
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'shortcut_sender' is signed (false).
     */
    public static boolean isSigned_shortcut_sender() {
        return false;
    }

    /**
     * Return whether the field 'shortcut_sender' is an array (false).
     */
    public static boolean isArray_shortcut_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'shortcut_sender'
     */
    public static int offset_shortcut_sender() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'shortcut_sender'
     */
    public static int offsetBits_shortcut_sender() {
        return 184;
    }

    /**
     * Return the value (as a short) of the field 'shortcut_sender'
     */
    public short get_shortcut_sender() {
        return (short)getUIntBEElement(offsetBits_shortcut_sender(), 8);
    }

    /**
     * Set the value of the field 'shortcut_sender'
     */
    public void set_shortcut_sender(short value) {
        setUIntBEElement(offsetBits_shortcut_sender(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'shortcut_sender'
     */
    public static int size_shortcut_sender() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'shortcut_sender'
     */
    public static int sizeBits_shortcut_sender() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tree_sender
    //   Field type: short, unsigned
    //   Offset (bits): 192
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tree_sender' is signed (false).
     */
    public static boolean isSigned_tree_sender() {
        return false;
    }

    /**
     * Return whether the field 'tree_sender' is an array (false).
     */
    public static boolean isArray_tree_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tree_sender'
     */
    public static int offset_tree_sender() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tree_sender'
     */
    public static int offsetBits_tree_sender() {
        return 192;
    }

    /**
     * Return the value (as a short) of the field 'tree_sender'
     */
    public short get_tree_sender() {
        return (short)getUIntBEElement(offsetBits_tree_sender(), 8);
    }

    /**
     * Set the value of the field 'tree_sender'
     */
    public void set_tree_sender(short value) {
        setUIntBEElement(offsetBits_tree_sender(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'tree_sender'
     */
    public static int size_tree_sender() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tree_sender'
     */
    public static int sizeBits_tree_sender() {
        return 8;
    }

}
