/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'NeighborMsg'
 * message type.
 */

public class NeighborMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 60;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 102;

    /** Create a new NeighborMsg of size 60. */
    public NeighborMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new NeighborMsg of the given data_length. */
    public NeighborMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg with the given data_length
     * and base offset.
     */
    public NeighborMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg using the given byte array
     * as backing store.
     */
    public NeighborMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public NeighborMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public NeighborMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg embedded in the given message
     * at the given base offset.
     */
    public NeighborMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NeighborMsg embedded in the given message
     * at the given base offset and length.
     */
    public NeighborMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <NeighborMsg> \n";
      try {
        s += "  [addr=0x"+Long.toHexString(get_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor_num=0x"+Long.toHexString(get_neighbor_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor0=0x"+Long.toHexString(get_neighbor0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor1=0x"+Long.toHexString(get_neighbor1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor2=0x"+Long.toHexString(get_neighbor2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor3=0x"+Long.toHexString(get_neighbor3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor4=0x"+Long.toHexString(get_neighbor4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor5=0x"+Long.toHexString(get_neighbor5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor6=0x"+Long.toHexString(get_neighbor6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor7=0x"+Long.toHexString(get_neighbor7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor8=0x"+Long.toHexString(get_neighbor8())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor9=0x"+Long.toHexString(get_neighbor9())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor10=0x"+Long.toHexString(get_neighbor10())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor11=0x"+Long.toHexString(get_neighbor11())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor12=0x"+Long.toHexString(get_neighbor12())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [neighbor13=0x"+Long.toHexString(get_neighbor13())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced0=0x"+Long.toHexString(get_reced0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced1=0x"+Long.toHexString(get_reced1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced2=0x"+Long.toHexString(get_reced2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced3=0x"+Long.toHexString(get_reced3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced4=0x"+Long.toHexString(get_reced4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced5=0x"+Long.toHexString(get_reced5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced6=0x"+Long.toHexString(get_reced6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced7=0x"+Long.toHexString(get_reced7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced8=0x"+Long.toHexString(get_reced8())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced9=0x"+Long.toHexString(get_reced9())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced10=0x"+Long.toHexString(get_reced10())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced11=0x"+Long.toHexString(get_reced11())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced12=0x"+Long.toHexString(get_reced12())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reced13=0x"+Long.toHexString(get_reced13())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: addr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'addr' is signed (false).
     */
    public static boolean isSigned_addr() {
        return false;
    }

    /**
     * Return whether the field 'addr' is an array (false).
     */
    public static boolean isArray_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'addr'
     */
    public static int offset_addr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'addr'
     */
    public static int offsetBits_addr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'addr'
     */
    public int get_addr() {
        return (int)getUIntBEElement(offsetBits_addr(), 16);
    }

    /**
     * Set the value of the field 'addr'
     */
    public void set_addr(int value) {
        setUIntBEElement(offsetBits_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'addr'
     */
    public static int size_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'addr'
     */
    public static int sizeBits_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor_num
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor_num' is signed (false).
     */
    public static boolean isSigned_neighbor_num() {
        return false;
    }

    /**
     * Return whether the field 'neighbor_num' is an array (false).
     */
    public static boolean isArray_neighbor_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor_num'
     */
    public static int offset_neighbor_num() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor_num'
     */
    public static int offsetBits_neighbor_num() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'neighbor_num'
     */
    public int get_neighbor_num() {
        return (int)getUIntBEElement(offsetBits_neighbor_num(), 16);
    }

    /**
     * Set the value of the field 'neighbor_num'
     */
    public void set_neighbor_num(int value) {
        setUIntBEElement(offsetBits_neighbor_num(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor_num'
     */
    public static int size_neighbor_num() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor_num'
     */
    public static int sizeBits_neighbor_num() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor0
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor0' is signed (false).
     */
    public static boolean isSigned_neighbor0() {
        return false;
    }

    /**
     * Return whether the field 'neighbor0' is an array (false).
     */
    public static boolean isArray_neighbor0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor0'
     */
    public static int offset_neighbor0() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor0'
     */
    public static int offsetBits_neighbor0() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'neighbor0'
     */
    public int get_neighbor0() {
        return (int)getUIntBEElement(offsetBits_neighbor0(), 16);
    }

    /**
     * Set the value of the field 'neighbor0'
     */
    public void set_neighbor0(int value) {
        setUIntBEElement(offsetBits_neighbor0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor0'
     */
    public static int size_neighbor0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor0'
     */
    public static int sizeBits_neighbor0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor1
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor1' is signed (false).
     */
    public static boolean isSigned_neighbor1() {
        return false;
    }

    /**
     * Return whether the field 'neighbor1' is an array (false).
     */
    public static boolean isArray_neighbor1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor1'
     */
    public static int offset_neighbor1() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor1'
     */
    public static int offsetBits_neighbor1() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'neighbor1'
     */
    public int get_neighbor1() {
        return (int)getUIntBEElement(offsetBits_neighbor1(), 16);
    }

    /**
     * Set the value of the field 'neighbor1'
     */
    public void set_neighbor1(int value) {
        setUIntBEElement(offsetBits_neighbor1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor1'
     */
    public static int size_neighbor1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor1'
     */
    public static int sizeBits_neighbor1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor2
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor2' is signed (false).
     */
    public static boolean isSigned_neighbor2() {
        return false;
    }

    /**
     * Return whether the field 'neighbor2' is an array (false).
     */
    public static boolean isArray_neighbor2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor2'
     */
    public static int offset_neighbor2() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor2'
     */
    public static int offsetBits_neighbor2() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'neighbor2'
     */
    public int get_neighbor2() {
        return (int)getUIntBEElement(offsetBits_neighbor2(), 16);
    }

    /**
     * Set the value of the field 'neighbor2'
     */
    public void set_neighbor2(int value) {
        setUIntBEElement(offsetBits_neighbor2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor2'
     */
    public static int size_neighbor2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor2'
     */
    public static int sizeBits_neighbor2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor3
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor3' is signed (false).
     */
    public static boolean isSigned_neighbor3() {
        return false;
    }

    /**
     * Return whether the field 'neighbor3' is an array (false).
     */
    public static boolean isArray_neighbor3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor3'
     */
    public static int offset_neighbor3() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor3'
     */
    public static int offsetBits_neighbor3() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'neighbor3'
     */
    public int get_neighbor3() {
        return (int)getUIntBEElement(offsetBits_neighbor3(), 16);
    }

    /**
     * Set the value of the field 'neighbor3'
     */
    public void set_neighbor3(int value) {
        setUIntBEElement(offsetBits_neighbor3(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor3'
     */
    public static int size_neighbor3() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor3'
     */
    public static int sizeBits_neighbor3() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor4
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor4' is signed (false).
     */
    public static boolean isSigned_neighbor4() {
        return false;
    }

    /**
     * Return whether the field 'neighbor4' is an array (false).
     */
    public static boolean isArray_neighbor4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor4'
     */
    public static int offset_neighbor4() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor4'
     */
    public static int offsetBits_neighbor4() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'neighbor4'
     */
    public int get_neighbor4() {
        return (int)getUIntBEElement(offsetBits_neighbor4(), 16);
    }

    /**
     * Set the value of the field 'neighbor4'
     */
    public void set_neighbor4(int value) {
        setUIntBEElement(offsetBits_neighbor4(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor4'
     */
    public static int size_neighbor4() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor4'
     */
    public static int sizeBits_neighbor4() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor5
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor5' is signed (false).
     */
    public static boolean isSigned_neighbor5() {
        return false;
    }

    /**
     * Return whether the field 'neighbor5' is an array (false).
     */
    public static boolean isArray_neighbor5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor5'
     */
    public static int offset_neighbor5() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor5'
     */
    public static int offsetBits_neighbor5() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'neighbor5'
     */
    public int get_neighbor5() {
        return (int)getUIntBEElement(offsetBits_neighbor5(), 16);
    }

    /**
     * Set the value of the field 'neighbor5'
     */
    public void set_neighbor5(int value) {
        setUIntBEElement(offsetBits_neighbor5(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor5'
     */
    public static int size_neighbor5() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor5'
     */
    public static int sizeBits_neighbor5() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor6
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor6' is signed (false).
     */
    public static boolean isSigned_neighbor6() {
        return false;
    }

    /**
     * Return whether the field 'neighbor6' is an array (false).
     */
    public static boolean isArray_neighbor6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor6'
     */
    public static int offset_neighbor6() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor6'
     */
    public static int offsetBits_neighbor6() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'neighbor6'
     */
    public int get_neighbor6() {
        return (int)getUIntBEElement(offsetBits_neighbor6(), 16);
    }

    /**
     * Set the value of the field 'neighbor6'
     */
    public void set_neighbor6(int value) {
        setUIntBEElement(offsetBits_neighbor6(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor6'
     */
    public static int size_neighbor6() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor6'
     */
    public static int sizeBits_neighbor6() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor7
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor7' is signed (false).
     */
    public static boolean isSigned_neighbor7() {
        return false;
    }

    /**
     * Return whether the field 'neighbor7' is an array (false).
     */
    public static boolean isArray_neighbor7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor7'
     */
    public static int offset_neighbor7() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor7'
     */
    public static int offsetBits_neighbor7() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'neighbor7'
     */
    public int get_neighbor7() {
        return (int)getUIntBEElement(offsetBits_neighbor7(), 16);
    }

    /**
     * Set the value of the field 'neighbor7'
     */
    public void set_neighbor7(int value) {
        setUIntBEElement(offsetBits_neighbor7(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor7'
     */
    public static int size_neighbor7() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor7'
     */
    public static int sizeBits_neighbor7() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor8
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor8' is signed (false).
     */
    public static boolean isSigned_neighbor8() {
        return false;
    }

    /**
     * Return whether the field 'neighbor8' is an array (false).
     */
    public static boolean isArray_neighbor8() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor8'
     */
    public static int offset_neighbor8() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor8'
     */
    public static int offsetBits_neighbor8() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'neighbor8'
     */
    public int get_neighbor8() {
        return (int)getUIntBEElement(offsetBits_neighbor8(), 16);
    }

    /**
     * Set the value of the field 'neighbor8'
     */
    public void set_neighbor8(int value) {
        setUIntBEElement(offsetBits_neighbor8(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor8'
     */
    public static int size_neighbor8() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor8'
     */
    public static int sizeBits_neighbor8() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor9
    //   Field type: int, unsigned
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor9' is signed (false).
     */
    public static boolean isSigned_neighbor9() {
        return false;
    }

    /**
     * Return whether the field 'neighbor9' is an array (false).
     */
    public static boolean isArray_neighbor9() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor9'
     */
    public static int offset_neighbor9() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor9'
     */
    public static int offsetBits_neighbor9() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'neighbor9'
     */
    public int get_neighbor9() {
        return (int)getUIntBEElement(offsetBits_neighbor9(), 16);
    }

    /**
     * Set the value of the field 'neighbor9'
     */
    public void set_neighbor9(int value) {
        setUIntBEElement(offsetBits_neighbor9(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor9'
     */
    public static int size_neighbor9() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor9'
     */
    public static int sizeBits_neighbor9() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor10
    //   Field type: int, unsigned
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor10' is signed (false).
     */
    public static boolean isSigned_neighbor10() {
        return false;
    }

    /**
     * Return whether the field 'neighbor10' is an array (false).
     */
    public static boolean isArray_neighbor10() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor10'
     */
    public static int offset_neighbor10() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor10'
     */
    public static int offsetBits_neighbor10() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'neighbor10'
     */
    public int get_neighbor10() {
        return (int)getUIntBEElement(offsetBits_neighbor10(), 16);
    }

    /**
     * Set the value of the field 'neighbor10'
     */
    public void set_neighbor10(int value) {
        setUIntBEElement(offsetBits_neighbor10(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor10'
     */
    public static int size_neighbor10() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor10'
     */
    public static int sizeBits_neighbor10() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor11
    //   Field type: int, unsigned
    //   Offset (bits): 208
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor11' is signed (false).
     */
    public static boolean isSigned_neighbor11() {
        return false;
    }

    /**
     * Return whether the field 'neighbor11' is an array (false).
     */
    public static boolean isArray_neighbor11() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor11'
     */
    public static int offset_neighbor11() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor11'
     */
    public static int offsetBits_neighbor11() {
        return 208;
    }

    /**
     * Return the value (as a int) of the field 'neighbor11'
     */
    public int get_neighbor11() {
        return (int)getUIntBEElement(offsetBits_neighbor11(), 16);
    }

    /**
     * Set the value of the field 'neighbor11'
     */
    public void set_neighbor11(int value) {
        setUIntBEElement(offsetBits_neighbor11(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor11'
     */
    public static int size_neighbor11() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor11'
     */
    public static int sizeBits_neighbor11() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor12
    //   Field type: int, unsigned
    //   Offset (bits): 224
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor12' is signed (false).
     */
    public static boolean isSigned_neighbor12() {
        return false;
    }

    /**
     * Return whether the field 'neighbor12' is an array (false).
     */
    public static boolean isArray_neighbor12() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor12'
     */
    public static int offset_neighbor12() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor12'
     */
    public static int offsetBits_neighbor12() {
        return 224;
    }

    /**
     * Return the value (as a int) of the field 'neighbor12'
     */
    public int get_neighbor12() {
        return (int)getUIntBEElement(offsetBits_neighbor12(), 16);
    }

    /**
     * Set the value of the field 'neighbor12'
     */
    public void set_neighbor12(int value) {
        setUIntBEElement(offsetBits_neighbor12(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor12'
     */
    public static int size_neighbor12() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor12'
     */
    public static int sizeBits_neighbor12() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: neighbor13
    //   Field type: int, unsigned
    //   Offset (bits): 240
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'neighbor13' is signed (false).
     */
    public static boolean isSigned_neighbor13() {
        return false;
    }

    /**
     * Return whether the field 'neighbor13' is an array (false).
     */
    public static boolean isArray_neighbor13() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'neighbor13'
     */
    public static int offset_neighbor13() {
        return (240 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'neighbor13'
     */
    public static int offsetBits_neighbor13() {
        return 240;
    }

    /**
     * Return the value (as a int) of the field 'neighbor13'
     */
    public int get_neighbor13() {
        return (int)getUIntBEElement(offsetBits_neighbor13(), 16);
    }

    /**
     * Set the value of the field 'neighbor13'
     */
    public void set_neighbor13(int value) {
        setUIntBEElement(offsetBits_neighbor13(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'neighbor13'
     */
    public static int size_neighbor13() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'neighbor13'
     */
    public static int sizeBits_neighbor13() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced0
    //   Field type: int, unsigned
    //   Offset (bits): 256
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced0' is signed (false).
     */
    public static boolean isSigned_reced0() {
        return false;
    }

    /**
     * Return whether the field 'reced0' is an array (false).
     */
    public static boolean isArray_reced0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced0'
     */
    public static int offset_reced0() {
        return (256 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced0'
     */
    public static int offsetBits_reced0() {
        return 256;
    }

    /**
     * Return the value (as a int) of the field 'reced0'
     */
    public int get_reced0() {
        return (int)getUIntBEElement(offsetBits_reced0(), 16);
    }

    /**
     * Set the value of the field 'reced0'
     */
    public void set_reced0(int value) {
        setUIntBEElement(offsetBits_reced0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced0'
     */
    public static int size_reced0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced0'
     */
    public static int sizeBits_reced0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced1
    //   Field type: int, unsigned
    //   Offset (bits): 272
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced1' is signed (false).
     */
    public static boolean isSigned_reced1() {
        return false;
    }

    /**
     * Return whether the field 'reced1' is an array (false).
     */
    public static boolean isArray_reced1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced1'
     */
    public static int offset_reced1() {
        return (272 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced1'
     */
    public static int offsetBits_reced1() {
        return 272;
    }

    /**
     * Return the value (as a int) of the field 'reced1'
     */
    public int get_reced1() {
        return (int)getUIntBEElement(offsetBits_reced1(), 16);
    }

    /**
     * Set the value of the field 'reced1'
     */
    public void set_reced1(int value) {
        setUIntBEElement(offsetBits_reced1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced1'
     */
    public static int size_reced1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced1'
     */
    public static int sizeBits_reced1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced2
    //   Field type: int, unsigned
    //   Offset (bits): 288
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced2' is signed (false).
     */
    public static boolean isSigned_reced2() {
        return false;
    }

    /**
     * Return whether the field 'reced2' is an array (false).
     */
    public static boolean isArray_reced2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced2'
     */
    public static int offset_reced2() {
        return (288 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced2'
     */
    public static int offsetBits_reced2() {
        return 288;
    }

    /**
     * Return the value (as a int) of the field 'reced2'
     */
    public int get_reced2() {
        return (int)getUIntBEElement(offsetBits_reced2(), 16);
    }

    /**
     * Set the value of the field 'reced2'
     */
    public void set_reced2(int value) {
        setUIntBEElement(offsetBits_reced2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced2'
     */
    public static int size_reced2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced2'
     */
    public static int sizeBits_reced2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced3
    //   Field type: int, unsigned
    //   Offset (bits): 304
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced3' is signed (false).
     */
    public static boolean isSigned_reced3() {
        return false;
    }

    /**
     * Return whether the field 'reced3' is an array (false).
     */
    public static boolean isArray_reced3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced3'
     */
    public static int offset_reced3() {
        return (304 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced3'
     */
    public static int offsetBits_reced3() {
        return 304;
    }

    /**
     * Return the value (as a int) of the field 'reced3'
     */
    public int get_reced3() {
        return (int)getUIntBEElement(offsetBits_reced3(), 16);
    }

    /**
     * Set the value of the field 'reced3'
     */
    public void set_reced3(int value) {
        setUIntBEElement(offsetBits_reced3(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced3'
     */
    public static int size_reced3() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced3'
     */
    public static int sizeBits_reced3() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced4
    //   Field type: int, unsigned
    //   Offset (bits): 320
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced4' is signed (false).
     */
    public static boolean isSigned_reced4() {
        return false;
    }

    /**
     * Return whether the field 'reced4' is an array (false).
     */
    public static boolean isArray_reced4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced4'
     */
    public static int offset_reced4() {
        return (320 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced4'
     */
    public static int offsetBits_reced4() {
        return 320;
    }

    /**
     * Return the value (as a int) of the field 'reced4'
     */
    public int get_reced4() {
        return (int)getUIntBEElement(offsetBits_reced4(), 16);
    }

    /**
     * Set the value of the field 'reced4'
     */
    public void set_reced4(int value) {
        setUIntBEElement(offsetBits_reced4(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced4'
     */
    public static int size_reced4() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced4'
     */
    public static int sizeBits_reced4() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced5
    //   Field type: int, unsigned
    //   Offset (bits): 336
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced5' is signed (false).
     */
    public static boolean isSigned_reced5() {
        return false;
    }

    /**
     * Return whether the field 'reced5' is an array (false).
     */
    public static boolean isArray_reced5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced5'
     */
    public static int offset_reced5() {
        return (336 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced5'
     */
    public static int offsetBits_reced5() {
        return 336;
    }

    /**
     * Return the value (as a int) of the field 'reced5'
     */
    public int get_reced5() {
        return (int)getUIntBEElement(offsetBits_reced5(), 16);
    }

    /**
     * Set the value of the field 'reced5'
     */
    public void set_reced5(int value) {
        setUIntBEElement(offsetBits_reced5(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced5'
     */
    public static int size_reced5() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced5'
     */
    public static int sizeBits_reced5() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced6
    //   Field type: int, unsigned
    //   Offset (bits): 352
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced6' is signed (false).
     */
    public static boolean isSigned_reced6() {
        return false;
    }

    /**
     * Return whether the field 'reced6' is an array (false).
     */
    public static boolean isArray_reced6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced6'
     */
    public static int offset_reced6() {
        return (352 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced6'
     */
    public static int offsetBits_reced6() {
        return 352;
    }

    /**
     * Return the value (as a int) of the field 'reced6'
     */
    public int get_reced6() {
        return (int)getUIntBEElement(offsetBits_reced6(), 16);
    }

    /**
     * Set the value of the field 'reced6'
     */
    public void set_reced6(int value) {
        setUIntBEElement(offsetBits_reced6(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced6'
     */
    public static int size_reced6() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced6'
     */
    public static int sizeBits_reced6() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced7
    //   Field type: int, unsigned
    //   Offset (bits): 368
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced7' is signed (false).
     */
    public static boolean isSigned_reced7() {
        return false;
    }

    /**
     * Return whether the field 'reced7' is an array (false).
     */
    public static boolean isArray_reced7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced7'
     */
    public static int offset_reced7() {
        return (368 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced7'
     */
    public static int offsetBits_reced7() {
        return 368;
    }

    /**
     * Return the value (as a int) of the field 'reced7'
     */
    public int get_reced7() {
        return (int)getUIntBEElement(offsetBits_reced7(), 16);
    }

    /**
     * Set the value of the field 'reced7'
     */
    public void set_reced7(int value) {
        setUIntBEElement(offsetBits_reced7(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced7'
     */
    public static int size_reced7() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced7'
     */
    public static int sizeBits_reced7() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced8
    //   Field type: int, unsigned
    //   Offset (bits): 384
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced8' is signed (false).
     */
    public static boolean isSigned_reced8() {
        return false;
    }

    /**
     * Return whether the field 'reced8' is an array (false).
     */
    public static boolean isArray_reced8() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced8'
     */
    public static int offset_reced8() {
        return (384 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced8'
     */
    public static int offsetBits_reced8() {
        return 384;
    }

    /**
     * Return the value (as a int) of the field 'reced8'
     */
    public int get_reced8() {
        return (int)getUIntBEElement(offsetBits_reced8(), 16);
    }

    /**
     * Set the value of the field 'reced8'
     */
    public void set_reced8(int value) {
        setUIntBEElement(offsetBits_reced8(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced8'
     */
    public static int size_reced8() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced8'
     */
    public static int sizeBits_reced8() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced9
    //   Field type: int, unsigned
    //   Offset (bits): 400
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced9' is signed (false).
     */
    public static boolean isSigned_reced9() {
        return false;
    }

    /**
     * Return whether the field 'reced9' is an array (false).
     */
    public static boolean isArray_reced9() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced9'
     */
    public static int offset_reced9() {
        return (400 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced9'
     */
    public static int offsetBits_reced9() {
        return 400;
    }

    /**
     * Return the value (as a int) of the field 'reced9'
     */
    public int get_reced9() {
        return (int)getUIntBEElement(offsetBits_reced9(), 16);
    }

    /**
     * Set the value of the field 'reced9'
     */
    public void set_reced9(int value) {
        setUIntBEElement(offsetBits_reced9(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced9'
     */
    public static int size_reced9() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced9'
     */
    public static int sizeBits_reced9() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced10
    //   Field type: int, unsigned
    //   Offset (bits): 416
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced10' is signed (false).
     */
    public static boolean isSigned_reced10() {
        return false;
    }

    /**
     * Return whether the field 'reced10' is an array (false).
     */
    public static boolean isArray_reced10() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced10'
     */
    public static int offset_reced10() {
        return (416 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced10'
     */
    public static int offsetBits_reced10() {
        return 416;
    }

    /**
     * Return the value (as a int) of the field 'reced10'
     */
    public int get_reced10() {
        return (int)getUIntBEElement(offsetBits_reced10(), 16);
    }

    /**
     * Set the value of the field 'reced10'
     */
    public void set_reced10(int value) {
        setUIntBEElement(offsetBits_reced10(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced10'
     */
    public static int size_reced10() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced10'
     */
    public static int sizeBits_reced10() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced11
    //   Field type: int, unsigned
    //   Offset (bits): 432
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced11' is signed (false).
     */
    public static boolean isSigned_reced11() {
        return false;
    }

    /**
     * Return whether the field 'reced11' is an array (false).
     */
    public static boolean isArray_reced11() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced11'
     */
    public static int offset_reced11() {
        return (432 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced11'
     */
    public static int offsetBits_reced11() {
        return 432;
    }

    /**
     * Return the value (as a int) of the field 'reced11'
     */
    public int get_reced11() {
        return (int)getUIntBEElement(offsetBits_reced11(), 16);
    }

    /**
     * Set the value of the field 'reced11'
     */
    public void set_reced11(int value) {
        setUIntBEElement(offsetBits_reced11(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced11'
     */
    public static int size_reced11() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced11'
     */
    public static int sizeBits_reced11() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced12
    //   Field type: int, unsigned
    //   Offset (bits): 448
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced12' is signed (false).
     */
    public static boolean isSigned_reced12() {
        return false;
    }

    /**
     * Return whether the field 'reced12' is an array (false).
     */
    public static boolean isArray_reced12() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced12'
     */
    public static int offset_reced12() {
        return (448 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced12'
     */
    public static int offsetBits_reced12() {
        return 448;
    }

    /**
     * Return the value (as a int) of the field 'reced12'
     */
    public int get_reced12() {
        return (int)getUIntBEElement(offsetBits_reced12(), 16);
    }

    /**
     * Set the value of the field 'reced12'
     */
    public void set_reced12(int value) {
        setUIntBEElement(offsetBits_reced12(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced12'
     */
    public static int size_reced12() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced12'
     */
    public static int sizeBits_reced12() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reced13
    //   Field type: int, unsigned
    //   Offset (bits): 464
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reced13' is signed (false).
     */
    public static boolean isSigned_reced13() {
        return false;
    }

    /**
     * Return whether the field 'reced13' is an array (false).
     */
    public static boolean isArray_reced13() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reced13'
     */
    public static int offset_reced13() {
        return (464 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reced13'
     */
    public static int offsetBits_reced13() {
        return 464;
    }

    /**
     * Return the value (as a int) of the field 'reced13'
     */
    public int get_reced13() {
        return (int)getUIntBEElement(offsetBits_reced13(), 16);
    }

    /**
     * Set the value of the field 'reced13'
     */
    public void set_reced13(int value) {
        setUIntBEElement(offsetBits_reced13(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reced13'
     */
    public static int size_reced13() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reced13'
     */
    public static int sizeBits_reced13() {
        return 16;
    }

}
