/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TreeBeaconMsg'
 * message type.
 */

public class TreeBeaconMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 68;

    /** Create a new TreeBeaconMsg of size 14. */
    public TreeBeaconMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TreeBeaconMsg of the given data_length. */
    public TreeBeaconMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TreeBeaconMsg with the given data_length
     * and base offset.
     */
    public TreeBeaconMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TreeBeaconMsg using the given byte array
     * as backing store.
     */
    public TreeBeaconMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TreeBeaconMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TreeBeaconMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TreeBeaconMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TreeBeaconMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TreeBeaconMsg embedded in the given message
     * at the given base offset.
     */
    public TreeBeaconMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TreeBeaconMsg embedded in the given message
     * at the given base offset and length.
     */
    public TreeBeaconMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TreeBeaconMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ebw=0x"+Long.toHexString(get_ebw())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [path_ebw=0x"+Long.toHexString(get_path_ebw())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [elder_id=0x"+Long.toHexString(get_elder_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [delay=0x"+Long.toHexString(get_delay())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [children_num=0x"+Long.toHexString(get_children_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [is_sender=0x"+Long.toHexString(get_is_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ebw
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ebw' is signed (false).
     */
    public static boolean isSigned_ebw() {
        return false;
    }

    /**
     * Return whether the field 'ebw' is an array (false).
     */
    public static boolean isArray_ebw() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ebw'
     */
    public static int offset_ebw() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ebw'
     */
    public static int offsetBits_ebw() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'ebw'
     */
    public int get_ebw() {
        return (int)getUIntBEElement(offsetBits_ebw(), 16);
    }

    /**
     * Set the value of the field 'ebw'
     */
    public void set_ebw(int value) {
        setUIntBEElement(offsetBits_ebw(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ebw'
     */
    public static int size_ebw() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ebw'
     */
    public static int sizeBits_ebw() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: path_ebw
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'path_ebw' is signed (false).
     */
    public static boolean isSigned_path_ebw() {
        return false;
    }

    /**
     * Return whether the field 'path_ebw' is an array (false).
     */
    public static boolean isArray_path_ebw() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'path_ebw'
     */
    public static int offset_path_ebw() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'path_ebw'
     */
    public static int offsetBits_path_ebw() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'path_ebw'
     */
    public int get_path_ebw() {
        return (int)getUIntBEElement(offsetBits_path_ebw(), 16);
    }

    /**
     * Set the value of the field 'path_ebw'
     */
    public void set_path_ebw(int value) {
        setUIntBEElement(offsetBits_path_ebw(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'path_ebw'
     */
    public static int size_path_ebw() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'path_ebw'
     */
    public static int sizeBits_path_ebw() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: elder_id
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'elder_id' is signed (false).
     */
    public static boolean isSigned_elder_id() {
        return false;
    }

    /**
     * Return whether the field 'elder_id' is an array (false).
     */
    public static boolean isArray_elder_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'elder_id'
     */
    public static int offset_elder_id() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'elder_id'
     */
    public static int offsetBits_elder_id() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'elder_id'
     */
    public int get_elder_id() {
        return (int)getUIntBEElement(offsetBits_elder_id(), 16);
    }

    /**
     * Set the value of the field 'elder_id'
     */
    public void set_elder_id(int value) {
        setUIntBEElement(offsetBits_elder_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'elder_id'
     */
    public static int size_elder_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'elder_id'
     */
    public static int sizeBits_elder_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delay
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delay' is signed (false).
     */
    public static boolean isSigned_delay() {
        return false;
    }

    /**
     * Return whether the field 'delay' is an array (false).
     */
    public static boolean isArray_delay() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'delay'
     */
    public static int offset_delay() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delay'
     */
    public static int offsetBits_delay() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'delay'
     */
    public int get_delay() {
        return (int)getUIntBEElement(offsetBits_delay(), 16);
    }

    /**
     * Set the value of the field 'delay'
     */
    public void set_delay(int value) {
        setUIntBEElement(offsetBits_delay(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'delay'
     */
    public static int size_delay() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'delay'
     */
    public static int sizeBits_delay() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: children_num
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'children_num' is signed (false).
     */
    public static boolean isSigned_children_num() {
        return false;
    }

    /**
     * Return whether the field 'children_num' is an array (false).
     */
    public static boolean isArray_children_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'children_num'
     */
    public static int offset_children_num() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'children_num'
     */
    public static int offsetBits_children_num() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'children_num'
     */
    public int get_children_num() {
        return (int)getUIntBEElement(offsetBits_children_num(), 16);
    }

    /**
     * Set the value of the field 'children_num'
     */
    public void set_children_num(int value) {
        setUIntBEElement(offsetBits_children_num(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'children_num'
     */
    public static int size_children_num() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'children_num'
     */
    public static int sizeBits_children_num() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: is_sender
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'is_sender' is signed (false).
     */
    public static boolean isSigned_is_sender() {
        return false;
    }

    /**
     * Return whether the field 'is_sender' is an array (false).
     */
    public static boolean isArray_is_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'is_sender'
     */
    public static int offset_is_sender() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'is_sender'
     */
    public static int offsetBits_is_sender() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'is_sender'
     */
    public int get_is_sender() {
        return (int)getUIntBEElement(offsetBits_is_sender(), 16);
    }

    /**
     * Set the value of the field 'is_sender'
     */
    public void set_is_sender(int value) {
        setUIntBEElement(offsetBits_is_sender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'is_sender'
     */
    public static int size_is_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'is_sender'
     */
    public static int sizeBits_is_sender() {
        return 16;
    }

}
