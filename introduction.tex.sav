\section{Introduction}
\label{sec-introduction}

% introduce LPL asynchronous duty cycle media access
In many IoT applications \cite{greenorbs} \cite{citysee}, devices are usually unattended and energy constraint. To extend network lifetime, asynchronous duty cycle radio management, namely LPL (Low Power Listening) (i.e. Box-MAC \cite{box}, Zisense \cite{zisense}) is widely adopted. In asynchronous duty cycle networks, all nodes periodically turn on their radios, but the active schedules are different. In order to achieve reliable broadcast, a sender has to continuously transmits the same packet for a whole sleep interval. Hopefully, a receiver can obtain a packet at the rendezvous.

Network flooding is a fundamental approach to propagate message to all devices in several system services, such as binary image dissemination \cite{zheng2016bulk}, time synchronization \cite{glossy} and system parameters update \cite{sleep}. Considering the network consistency, the network flooding should be completed as fast as possible. The completion time is defined as the time between the sink starts to broadcast and the last device successfully receives the flooding packet. To achieve short completion time, the key problem is how to select a set of senders, which further broadcast the received flooding packet to cover all devices. In asynchronous duty cycle networks, due to the unpredictable wake-up delay of different devices, selecting a small set of senders may miss early wake-up opportunities to speed up network flooding. However, due to the long channel occupation of a broadcast, selecting a large set of senders may increase the probability of packet collision. Hence, sender selection of network flooding is extremely challenging in asynchronous duty cycle networks.

To simultaneously exploit the early wake-up opportunities and alleviate packet collision, \emph{Chase}~\cite{chase} utilizes capture effect to develop concurrent flooding. In \emph{Chase}, all devices immediately broadcast the received flooding packet without any backoff, to construct capture effect intentionally. Unfortunately, in Section~\ref{sec-empirical-study}, we find that the completion time of concurrent flooding may be significantly enlarged if all devices are selected to concurrently broadcast, especially in dense networks. Moreover, the energy is also overused because every device needs to broadcast for a whole sleep interval. As a result, the overall performance of concurrent flooding is still limited in most circumstances. Hence, the question here is \emph{how to adaptively select a set of senders to achieve both fast concurrent flooding and efficient energy usage in asynchronous duty cycle networks}.

% explain the methodology of our protocol and conclude the contribution of this work
In this paper, we propose COFlood (Concurrent Opportunistic Flooding), a practical flooding protocol with efficient sender selection, to improve both completion time and energy consumption of concurrent flooding. The basic idea is to explore the early wake-up opportunities on an energy efficient concurrent flooding structure. With local information, COFlood enables devices distinguish the occurrence of an early wake-up opportunity. Specifically, COFlood consists of three parts. COFlood selects a small set of senders to construct a flooding tree that completely covers the entire network with the minimum broadcast cost. Then, on the flooding tree, COFlood develops an adaptive model to compute the expected delay that a device successfully receives the flooding packet. To further reduce coverage delay, the opportunity that a device successfully receives the flooding packet earlier than the expected is exploited. While to keep the efficiency of concurrent flooding, we develop an opportunistic method to bound the number of total senders.

We implement COFlood in TinyOS and evaluate its performance on two real testbeds. The results show that ... . The main contributions are listed as follows:
\begin{itemize}
  \item We empirically study the performance of state-of-the-art concurrent flooding and show the tradeoffs of sender selection in asynchronous duty cycle networks.
  \item We propose COFlood, a practical protocol of sender selection, to achieve both fast concurrent flooding and efficient energy usage.
  \item We evaluate COFlood on two real testbeds. The results show that the completion time can be improved up to 35.3\%. The energy efficiency can be reduced up to 26.6\%.
\end{itemize}

% describe the organization of the paper
The rest paper is organized as follows. Section~\ref{sec-empirical-study} carefully study the performance of state-of-the-art concurrent flooding on two real testbeds. The detailed design of COFlood protocol is shown in Section~\ref{sec-design}. We show the implementation and evaluation results in Section~\ref{sec-implementation} and~\ref{sec-evaluation}, respectively. The related works are introduced in Section~\ref{sec-related-work}. Finally, we conclude our work in Section~\ref{sec-conclusion}.
